1.  A Literal is a constant variable whose value does not change during the lifetime of the program. 
    Whereas, a raw string literal is a string in which the escape characters like ‘ \n, \t, or \” ‘ 
    of C++ are not processed. Hence, a raw string literal that starts with R”( and ends in )”.
2.  Create a map to store unique substrings of size 2
    
    map<pair<char,char>, int> dPairs;
    string str("rajeshkjemara");
    
    // Count occurrences of all pairs
    for (int i=0; i<str.size()-1; i++)
        dPairs[make_pair(str[i], str[i+1])]++;
 
    // Traverse map to print sub-strings and their counts.
    for (auto it=dPairs.begin(); it!=dPairs.end(); it++)
        cout << it->first.first << it->first.second
             << "-" << it->second << " ";
			 
	map<int, string> mapExample;
	mapExample.insert(pair<int, string>(6, "Example"));
	 cout<<"Traversing the map with foreach using map's data type\n";
      for (pair<int, string> mpEx : mapExample ) {
        cout<<mpEx.first<<" "<<mpEx.second<<endl;
    }
   
    cout<<"\nTraversing the map with foreach using auto keyword\n";
      for (auto mpEx : mapExample){
        cout<<mpEx.first<<" "<<mpEx.second<<endl;
    }
	
3.  Following are the properties which a derived class doesn’t inherit from its parent class : 
    1) The base class’s constructors and destructor. 
    2) The base class’s friend functions.
    3) Overloaded operators of the base class.

4.  Object Slicing:
    When a derived class object is assigned to a base class object in C++, the derived class 
    object’s extra attributes are sliced off (not considered) to generate the base class object; 
    and this whole process is termed object slicing. In simple words, when extra components 
    of a derived class are sliced or not used and the priority is given to the base class’s object 
    this is termed object slicing.
    In C++, a derived class object can be assigned to a base class object, but the other way is not 
    possible. To tackle this slicing problem we can use a dynamic pointer.
    Derived class object sliced from memory allocation.
    We can avoid the above-unexpected behavior with the use of pointers or references. 
    Object slicing doesn’t occur when pointers or references to objects are passed as function arguments 
    since a pointer or reference of any type takes the same amount of memory.
    Object slicing can be prevented by making the base class function pure virtual thereby disallowing 
    object creation. It is not possible to create the object of a class that contains a pure virtual 
    method.
5.  Hiding of all Overloaded:
    In C++, function overloading is possible i.e., two or more functions from the same class 
    can have the same name but different parameters. However, if a derived class redefines the 
    base class member method then all the base class methods with the same name become hidden in 
    the derived class.
    Even if the signature of the derived class method is different, all the overloaded methods in 
    the base class become hidden.
    The above facts are true for both static and non static methods.
    it is possible to unhide it by using the ‘using’ keyword. This keyword brings a base class 
    method ​or variable into the current class’s scope.
6.  Friendship in C++: Usually, private and protected members of a class cannot be accessed from outside
    the same class in which they are declared. However, a friend class has the access to the protected 
    and private members of the first one. Classes that are ‘friends’ can access not just the public 
    members, but the private and protected members too.
    Difference between Inheritance and Friendship in C++: In C++, friendship is not inherited. 
    If a base class has a friend function, then the function doesn’t become a friend of the derived 
    class(es).
7.	Exception:
	1.	All types (including primitive and pointer) can be thrown as exceptions.
	2.	There is a special catch called “catch all” that can catch all kinds of exceptions.
	3.	The keyword throw is used to list exceptions that can be thrown by a function.
8.	In C++, pre-increment (or pre-decrement) can be used as l-value, but post-increment (or post-decrement) can not be used as l-value.  
	l-value is simply nothing but the memory location, which has an address.
	int a = 10;
	++a = 20; // works
	--a = 10; // works
	a++ = 20; // error
	
	It is because ++a returns an lvalue, which is basically a reference to the variable to which we can further assign — just like an ordinary variable. It could also be assigned to a reference as follows:
	int &ref = ++a; // valid
	int &ref = a++; // invalid
	Whereas if you recall how a++ works, it doesn’t immediately increment the value it holds. For clarity, you can think of it as getting incremented in the next statement. So what basically happens is that, a++ returns an rvalue, which is basically just a value like the value of an expression that is not stored. You can think of a++ = 20; as follows after being processed:

	int a = 10;
	// On compilation, a++ is replaced by the value of a which is an rvalue:
	10 = 20; // Invalid
10.	copy constructor:
	we need to define our own copy constructor only if an object has pointers or any runtime allocation of the resource like filehandle, a network connection, etc.
11.	private destructors:
	when a class has a private destructor, only dynamic objects of that class can be created. Following is a way to create classes with private destructors and have a function as a friend of the class. The function can only delete the objects.
	When something is created using dynamic memory allocation, it is the programmer’s responsibility to delete it. So compiler doesn’t bother.
12.	private Constructor:
	Yes, Constructor can be defined in private section of class.
	How to use Constructors in private section?
	1.	Using Friend Class : If we want that class should not be instantiated by anyone else but only by a friend class.
	2.  Using Singleton design pattern.
	3.  Named Constructor Idiom, using static member function.
13. Explicit Keyword in C++ is used to mark constructors to not implicitly convert types in C++.
	in C++, if a class has a constructor which can be called with a single argument, then this constructor becomes a conversion constructor because such a constructor allows conversion of the single argument to the class being constructed.

14. STL
	Sequence containers: Sequence containers implement data structures that can be accessed sequentially.
	
	array: Static contiguous array (class template)
	vector: Dynamic contiguous array (class template)
		Random access – constant O(1)
		Insertion or removal of elements at the end – constant O(1)
		Insertion or removal of elements – linear in the distance to the end of the vector O(N)
	deque: Double-ended queue (class template)
		Accessing Elements- O(1)
		Insertion or removal of elements- O(N)
		Insertion or removal of elements at start or end- O(1)
	forward_list: Singly-linked list (class template)
	list: Doubly-linked list (class template)
		As compared to vector, the list has slow traversal, but once a position has been found, insertion and deletion are quick. Normally,
		when we say a List, we talk about a doubly linked list. For implementing a singly linked list, we use a forward list.
	Arrays and Vectors are contiguous in nature, therefore the insertion and deletion operations are costlier as compared to the insertion and deletion option in Lists.
	
	Associative containers: Associative containers implement sorted data structures that can be quickly searched (O(log n) complexity). 
	
	Set: Collection of unique keys, sorted by keys (class template)
		Stores the values in sorted order.
		Stores only unique values. 
		Elements can only be inserted or deleted but cannot be modified. 
		We can erase more than 1 element by giving the start iterator and end iterator position. 
		Traversal using iterators. 
		Sets are implemented as Binary Search Tree.
		The time complexities for doing various operations on sets are:
		Insertion of Elements – O(log N)
		Deletion of Elements – O(log N)
	Map: Collection of key-value pairs, sorted by keys, keys are unique (class template).
		Implementation: Red-Black Tree
		search time: log(n)
		Insertion time: log(n) + Rebalance
		Deletion time: log(n) + Rebalance
	multiset: Collection of keys, sorted by keys (class template)
		They are associative containers that store multiple elements having equivalent values following a specific order.
	multimap: Collection of key-value pairs, sorted by keys (class template). multiple elements can have the same keys.
		Also, it is NOT required that the key-value and mapped value pair have to be unique in this case. One important thing to note about multimap is that multimap keeps all the keys in sorted order always.
	
	Unordered associative containers: Unordered associative containers implement unsorted (hashed) data structures that can be quickly searched (O(1) amortized, O(n) worst-case complexity). 
	
	unordered_set: Collection of unique keys, hashed by keys. (class template)
		They are associative containers that store unique elements in no particular order.
		Note: All other properties are similar to the set. 
	unordered_map: Collection of key-value pairs(no ordering), hashed by keys, keys are unique. (class template)
		Implementation :  Hash Table
		search time, Insertion time, Deletion time  :	O(1) -> Average, O(n) -> Worst Case
	Note: map is slow as compare to unordered_map.
	unordered_multiset: Collection of keys, hashed by keys (class template)
		It is an associative container that contains a set of non-unique elements in unsorted order
		Note: All other properties are similar to the Multiset.
	unordered_multimap: Collection of key-value pairs, hashed by keys (class template)
	
	Container adaptors: The container adapters are classes that provide a subset of a sequential container's functionality but may provide additional functionality that makes it easier to use containers for certain scenarios.
	
	stack: Adapts a container to provide stack (LIFO data structure) (class template).
		time complexity: O(1)
	queue: Adapts a container to provide queue (FIFO data structure) (class template).
		time complexity: O(1)
	priority_queue: Adapts a container to provide priority queue (class template).
	
15.	Pair:
	Pair is used to combine together two values that may be of different data types. Pair provides a way to store two heterogeneous objects as a single unit. It is basically used if we want to store tuples.
	
	Member Functions: 
	1) Pair_name = make_pair (value1,value2);
	pair<string, double> myPair = make_pair("GeeksForGeeks is Best", 4.56);
	pair<int, double> myPair(100, 4.56);
	pair<string, int> myPair; myPair.first = "Rajesh"; myPair.second = 100;
	2) swap: This function swaps the contents of one pair object with the contents of another pair object. The pairs must be of the same type. pair1.swap(pair2)
	pair<int, pair<int, char> > myPair = { 3, { 4, 'a' } };
	
16.	vector 										List
	It has contiguous memory.					While it has non-contiguous memory.
	It is synchronized.							While it is not synchronized.
	Insertion or removal at the end requires constant time but insertion elsewhere is costly.	Insertion or removal is cheap no matter where in the list it occurs.
	Vector is thread safe.						List is not thread safe.
	Random access of elements is possible.		Random access of elements is not possible.
	Any algorithm that requires a random access iterator can be used with std::vector but cannot be used with std::list. std::sort is one example; that's why std::list has its own sort function.
17.	Basic Code Review Checklist
	While reviewing the code, ask yourself the following basic questions:
	1.	Am I able to understand the code easily?
	2.	Is the code written following the coding standards/guidelines?
	3.	Is the same code duplicated more than twice?
	4.	Can I unit test / debug the code easily to find the root cause?
	5.	Is this function or class too big? If yes, is the function or class having too many responsibilities?
	If you feel that the answer is not satisfactory to any of the above questions, then you can suggest/recommend code changes.
	
	1. Code formatting:
		a) Use alignments (left margin), proper white space. Also ensure that code block starting point and ending point are easily identifiable.
		b) Ensure that proper naming conventions (Pascal, CamelCase etc.) have been followed. 
		c) Code should fit in the standard 14 inch laptop screen.  There shouldn’t be a need to scroll horizontally to view the code.
		d) Remove the commented code as this is always a blocker, while going through the code. 
	2. Architecture:
		a) The code should follow the defined architecture.
			Code is in sync with existing code patterns/technologies. Design patterns: Use appropriate design pattern (if it helps), after completely understanding the problem and context.
	3. Coding best practices:
		1. No hard coding, use constants/configuration values.
		2. Group similar values under an enumeration (enum).
		3. Comments – Do not write comments for what you are doing, instead write comments on why you are doing. Specify about any hacks, workaround and temporary fixes. Additionally, mention pending tasks in your to-do comments, which can be tracked easily.
		4. Avoid multiple if/else blocks.
		5. Use framework features, wherever possible instead of writing custom code
	4. Non Functional requirements:
		a) Maintainability (Supportability) – The application should require the least amount of effort to support in near future. It should be easy to identify and fix a defect.
			1. Readability, 2. Testability, 3. Debuggability, 4. Configurability.
		b) Reusability.
		c) Reliability.
18. 